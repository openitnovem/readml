#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2022 GroupeSNCF 
#
# SPDX-License-Identifier: Apache-2.0

#
# AUTHOR: GII - Fab Big Data - 08/2017
# This hook validates the commit message. It is applied only when commiting on
# the 'develop' branch.
# 
# To use this hook:
#   * place this file (DO NOT CHANGE THE NAME: must be pre-commit)
#     in the .git/git_hooks folder
#   * make it executable
#   * you'll find a log file ``log_hook`` in the .git/hook folder and two messages
#     generated by the hook script in the std out (they start with HOOK:)
#   * Use the git option --no-verify if you want to bypass the hook

from time import strftime
import sys
import os


def check_message_compliance(message_file_name):
    """ Check if the commit message satisfies the rules.
        :param str message_file_name: name of the temporary file where the commit message is stored
        :return str OK if the message is fine
        :raises an exception if the message is not compliant
    """
    try:
        # Log File for the hook process
        hook_log_file_name = os.path.join(base_path, ".git", "hooks", "hook.log")
        f_log = open(hook_log_file_name, 'a')
        f_log.write('\n Starting hook (commit message validation) at {} \n'.format(
            strftime("%d/%m/%Y %H:%M:%S")))

        # Read commit message 
        with open(message_file_name) as f:
            message = f.read()

        # Message must start with
        # FIX (correction), WIP (work in progress), IMPL (dev finished),
        # Merge (merge with other branch)
        if not (message.startswith('FIX') or message.startswith('WIP') or message.startswith(
                'IMPL') or message.startswith('Merge')):
            raise ValueError('Message is not compliant \n')

        print('[HOOK] message has been validated \n'.format(message))
        f_log.write('Commit message has been validated \n')

    except ValueError as e:
        print('[HOOK] message is not valid: {} '.format(message))
        f_log.write('Message is not compliant \n')
        raise e

    finally:
        f_log.write('Hook (commit message validation) finished at {} \n'.format(
            strftime("%d/%m/%Y %H:%M:%S")))
        f_log.close()

    return 'OK'


if __name__ == "__main__":

    base_path = os.getcwd()

    # get current branch
    with open(os.path.join(base_path, '.git', 'HEAD')) as f:
        head = f.read()

    check_message_compliance(os.path.join(base_path, sys.argv[1]))
